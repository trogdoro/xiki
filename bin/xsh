#!/usr/bin/env bash

set -f

# Set gem_home, so xiki gems don't interfere with main ones...

mkdir -p ~/xiki/misc/gems/
export GEM_HOME=~/xiki/misc/gems/
export PATH=~/xiki/misc/gems/bin/:$PATH

# Resolve the xiki dir even if there's a symlink somewhere in the path...

SOURCE="$0"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
export xiki_dir=`dirname "$( cd -P "$( dirname "$SOURCE" )" && pwd )"`

# Complain if project dir is ~/xiki/...

if [ "$xiki_dir" = "$HOME" ]; then
  cat "$xiki_dir/misc/command/shell_please_move.txt"
  exit
fi

emacs="emacs"
emacsclient="emacsclient"

# Get emacs version, or blank if emacs not found...

emacs_version=`$emacs --version 2>&1`

function check_dependencies {

  # Underline formatting
  u=`tput smul`
  uu=`tput rmul`

  ruby_is_installed=$(type -P ruby)
  emacs_is_installed=$(type -P emacs)

  # No emacs or no ruby, so figure out how to install...

  if [[ ! "$ruby_is_installed" =~ ^/ ]] || [[ ! "$emacs_is_installed" =~ ^/ ]]; then

    yum_is_installed=$(type -P yum)
    aptget_is_installed=$(type -P apt-get)
    pacman_is_installed=$(type -P pacman)

    yum_install="sudo yum install -q -y"
    aptget_install="sudo apt-get install -qq -y"
    pacman_install="sudo pacman -S"

    echo -e "\nIt looks like you haven't yet installed the dependencies"
    echo -e "xsh needs. Install them? (You can optionally install the\ndependencies yourself first.)\n"

    echo -e "  ${u}i${uu}nstall the dependencies"
    echo -e "  ${u}c${uu}ancel"
    echo -e "  ${u}s${uu}how them first\n"

    read -n1 -p "Type one of the highlighted letters: " doit

    if [ "$doit" = "c" ]; then
      echo -e "\n\nXsh can't run without it's dependencies :(\n"
      exit 1
    fi

    if [[ "$yum_is_installed" =~ ^/ ]] && [[ "$aptget_is_installed" =~ ^/ ]]; then
      echo -e "\n\nIt appears you have both apt-get and yum installed.  Which should we use?"
      echo "  a: apt-get"
      echo "  y: yum"
      echo ""
      read -n1 -p "(a/y): " choice
      if [ "$choice" = "a" ]; then
        install="$aptget_install"
      elif [ "$choice" = "y" ]; then
        install="$yum_install"
      elif [ "$choice" = "p" ]; then
        install="$pacman_install"
      else
        echo "You didn't type 'a' or 'y'."
        exit 1
      fi

    elif [[ "$aptget_is_installed" =~ ^/ ]]; then
      install="$aptget_install"
    elif [[ "$yum_is_installed" =~ ^/ ]]; then
      install="$yum_install"
    elif [[ "$pacman_is_installed" =~ ^/ ]]; then
      install="$pacman_install"
    else
      dir="$xiki_dir/misc/install"
      install="sudo bash $dir/install_source_dependency.sh"
    fi

    case "$doit" in
      i|I)
        echo -e "\n\nInstalling the dependencies. Could take a few minutes...\n"
        if [[ ! "$ruby_is_installed" =~ ^/ ]]; then
          if ! $install ruby || [[ ! $(type -P ruby) =~ ^/ ]]; then
            echo ruby install failed\!
            exit 1
          fi
        fi
        if [[ ! "$emacs_is_installed" =~ ^/ ]]; then
          if ! $install emacs || [[ ! $(type -P emacs) =~ ^/ ]]; then
            echo emacs install failed\!
            exit 1
          fi
        fi
        echo -e "\n\n"
        # No exit, so continue on to run xsh
        ;;
      s|S)
        echo -e "\n\nThis will be run to install xsh's dependencies:\n"
        if [[ ! "$ruby_is_installed" =~ ^/ ]]; then
          echo "  $ $install ruby"
        fi
        if [[ ! "$emacs_is_installed" =~ ^/ ]]; then
          echo "  $ $install emacs"
        fi
        echo -e "\nNote that xsh's dependencies are largely transparent\nto the user.  You don't need to have any expertise\nabout them to use xsh."
        echo -e "\nRun \"./xsh\" to see the options again. (You can optionally install the\ndependencies yourself first.)\n"
        exit
        ;;
      *)
        echo -e "\n\nXsh can't run without it's dependencies :(\n"
        exit 1
        ;;
    esac

  fi

  # Mac and emacs22, so recommend "brew install emacs"...

  if [[ "$emacs_version" =~ "Emacs 22" ]] && [ `uname` = "Darwin" ] && [[ $(type -P brew) =~ ^/ ]]; then

    echo "Additional optional dependencies are recommended to"
    echo "make xsh run more smoothly. It should take less than"
    echo -e "a minute over a fast internet connection.\n"

    echo -e "  ${u}i${uu}nstall the dependencies"
    echo -e "  ${u}p${uu}roceed without them"
    echo -e "  ${u}s${uu}how them first\n"

    read -n1 -p "Type one of the highlighted letters: " doit

    case "$doit" in
      i|I)
        echo -e "\n\n"
        brew install emacs
        ;;
      p|P)
        echo
        ;;
      s|S)
        echo -e "\n\nThis will be run:\n"
        echo "  brew install emacs"
        echo -e "\nRun \"./xsh\" to see the options again.\n"
        exit
        ;;
      *)
        echo -e "\n\nYour choice wasn't understood. Run \"./xsh\" to see the options again.\n"
        exit 1
        ;;
    esac

  fi

}

check_dependencies

# Proceed to run the command...

function save_args_to_envs {
  let i=1
  for var in "$@"
  do
    export XSH_COMMAND_LINE_ARG_$i="$var"
    let "i++"
  done
}

storeargs() {
  while [ $# -gt 0 ]
  do
    printf "%q " "$1"
    shift
  done
}

function save_args_to_files {
  let i=1

  # New
  dir=~/xiki/misc/tmp
  mkdir -p $dir

  storeargs "$@" > $dir/params.txt

}

# Force 256 colors (what if terminal doesn't handle it? > probably only do this recognizable $TERM, $TERM_PROGRAM and $COLORTERM vars)...

export TERM=xterm-256color

# Maybe use /Applications/Emacs.app if it exists?
# emacs_mac_app="/Applications/Emacs.app/Contents/MacOS/Emacs"
# if [ -f $emacs_mac_app ]; then
#   emacs=$emacs_mac_app
#   emacsclient="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
# fi

case $1 in
--help)
  cat "$xiki_dir/misc/command/external_shell_help.txt"

  exit
  ;;

--examples)
  cat "$xiki_dir/misc/command/external_shell_examples.txt"

  exit
  ;;

-i)

  # -i, for "isolated", so just run with no deamon...

  # Alternatives considered: unique, unconnected, separate, alone, peerless

  # Load with xiki-no-socket flag, so pull of 1st arg...

  shift   # The 1st argument was "-i"
  save_args_to_envs "$@"

  exec $emacs -nw -Q \
    -l "$xiki_dir/misc/emacs/start_xiki_no_socket.el"
  ;;

*)

  # Load normally, so save args and launch emacs...

  if [[ $emacs_version =~ Emacs\ 2[21] ]]; then

    # Emacs 22, so don't use --daemon (a little slower, but won't flicker in Emacs 22)...

    save_args_to_envs "$@"

    # Run emacs command

    exec $emacs --no-splash -nw -Q -l "$xiki_dir/misc/emacs/start_xiki.el"

  else

    # Emacs 23+, so use --daemon (will make for immediate startup)...

    # Always start emacs --daemon, and then connect to it. This avoids
    # emacs flashing weird text and formatting on the screen.

    unique=$RANDOM
    $emacs -Q --daemon=$unique -nw &>/dev/null

    # Now that emacs is invisible, tell it to load the xiki classes (and cache a few things).

    $emacsclient -s $unique -e "(load \"$xiki_dir/misc/emacs/start_xiki_daemon.el\")" &>/dev/null

    # Now load the parameters into ~/xiki/misc/params/

    save_args_to_files "$@"

    # Now run it.  The hook will run when it opens and load the params

    $emacsclient -s $unique -t

  fi

  ;;

esac
