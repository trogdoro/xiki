#!/bin/bash -f


# Resolve the xiki dir even if this shell script is symlinked. See for more
# information http://stackoverflow.com/a/246128

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do 
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # 
done
export xiki_dir=`dirname "$( cd -P "$( dirname "$SOURCE" )" && pwd )"`

# Complain if project dir is ~/xiki/...
if [ "$xiki_dir" = "$HOME" ]; then
  cat "$xiki_dir/misc/command/shell_please_move.txt"
  exit
fi


emacs="emacs"
emacsclient="emacsclient"


# Get emacs version, or blank if emacs not found...

emacs_version=`$emacs --version 2>&1`
if [[ $emacs_version =~ "command not found" ]]; then
  emacs_version=""
fi


function check_dependencies {

  ruby_is_installed=`which ruby 2>&1`

  if [[ ! "$ruby_is_installed" =~ ^/ ]] || [ "$emacs_version" = "" ]; then

    yum_is_installed=`which yum 2>&1`
    aptget_is_installed=`which apt-get 2>&1`

    yum_install="sudo yum install -q -y"
    aptget_install="sudo apt-get install -qq -y"

    echo "It looks like you haven't yet installed the dependencies"
    echo -e "xsh needs. Install them?\n"

    # Underline formatting
    u=`tput smul`
    uu=`tput rmul`

    echo -e "  ${u}i${uu}nstall the dependencies"
    echo -e "  ${u}c${uu}ancel"
    echo -e "  ${u}s${uu}how them first\n"

    read -n1 -p "Type one of the underlined letters: " doit

    if [ "$doit" = "c" ]; then
      echo -e "\n\nXsh can't run without it's dependencies :(\n"
      exit 1
    fi

    if [[ "$yum_is_installed" =~ ^/ ]] && [[ "$aptget_is_installed" =~ ^/ ]]; then
      echo -e "\n\nIt appears you have both apt-get and yum installed.  Which should we use?"
      echo "  a: apt-get"
      echo "  y: yum"
      echo ""
      read -n1 -p "(a/y): " choice
      if [ "$choice" = "a" ]; then
        install="$aptget_install"
      elif [ "$choice" = "y" ]; then
        install="$yum_install"
      else
        echo "You didn't type 'a' or 'y'."
        exit 1
      fi

    elif [[ "$aptget_is_installed" =~ ^/ ]]; then
      install="$aptget_install"
    elif [[ "$yum_is_installed" =~ ^/ ]]; then
      install="$yum_install"
    else
      dir="$xiki_dir/misc/install"
      install="sudo bash $dir/install_source_dependency.sh"
    fi

    case "$doit" in
      i|I)
        echo -e "\n\n"
        if [[ ! "$ruby_is_installed" =~ ^/ ]]; then
          if ! $install ruby || [[ ! "`which ruby 2>&1`" =~ ^/ ]]; then
            echo ruby install failed\!
            exit 1
          fi
        fi
        if [ "$emacs_version" = "" ]; then
          if ! $install emacs || [[ ! "`which emacs 2>&1`" =~ ^/ ]]; then
            echo emacs install failed\!
            exit 1
          fi
        fi
        echo -e "\n\n"
        # No exit, so continue on to run xsh
        ;;
      s|S)
        echo -e "\n\nThis will be run to install xsh's dependencies:\n"
        if [[ ! "$ruby_is_installed" =~ ^/ ]]; then
          echo "  $ $install ruby"
        fi
        if [ "$emacs_version" = "" ]; then
          echo "  $ $install emacs"
        fi
        echo -e "\nNote that xsh's dependencies are largely transparent\nto the user.  You don't need to have any expertise\nabout them to use xsh."
        echo -e "\nRun the 'xsh' command again. (You can optionally install the\ndependencies yourself first.)\n"
        exit
        ;;
      *)
        echo -e "\n\nXsh can't run without it's dependencies :(\n"
        exit 1
        ;;
    esac

  fi

}

check_dependencies


# Proceed to run the command...

function save_args_to_envs {
  let i=1
  for var in "$@"
  do
    export XSH_COMMAND_LINE_ARG_$i="$var"
    let "i++"
  done
}

function save_args_to_files {
  let i=1

  params_dir=~/xiki/misc/params
  if [ ! -d $params_dir ]; then
    orig=`umask`
    umask 077
    mkdir -p $params_dir
    umask $orig
  fi

  for var in "$@"
  do
    echo "$var" > $params_dir/p$i
    let "i++"
  done

  # If no args, have a single blank file, since if there are no files, the hook won't do anything...

  if [ $# -eq 0 ]; then
    echo "" > $params_dir/p1
  fi
}

# Force 256 colors (what if terminal doesn't handle it? > probably only do this recognizable $TERM, $TERM_PROGRAM and $COLORTERM vars)...

export TERM=xterm-256color

# emacs_mac_app="/Applications/Emacs.app/Contents/MacOS/Emacs"
# if [ -f $emacs_mac_app ]; then
#   emacs=$emacs_mac_app
#   emacsclient="/Applications/Emacs.app/Contents/MacOS/bin/emacsclient"
# fi

case $1 in
--help)
  cat "$xiki_dir/misc/command/external_shell_help.txt"

  exit
  ;;

--examples)
  cat "$xiki_dir/misc/command/external_shell_examples.txt"

  exit
  ;;

-i)

  # -i is for "isolated".
  # Alternatives considered: unique, unconnected, separate, alone, peerless

  # Load with xiki-no-socket flag, so pull of 1st arg...

  shift   # The 1st argument was "-i"
  save_args_to_envs "$@"

  exec $emacs -nw -Q \
    -l "$xiki_dir/misc/emacs/start_xiki_no_socket.el"
  ;;

*)

  # Load normally, so save args and launch emacs...

  if [[ $emacs_version =~ "Emacs 22" ]]; then

    # Emacs 22, so don't use --daemon (a little slower, but won't flicker in Emacs 22)...

    save_args_to_envs "$@"

    # Run emacs command

    exec $emacs --no-splash -nw -Q -l "$xiki_dir/misc/emacs/start_xiki.el"

  else

    # Emacs 23+, so use --daemon (will make for immediate startup)...

    # If emacs --daemon not running yet, start it up and make it load xiki...

    unique=$RANDOM

    ERROR=$( { $emacsclient -s $unique -e "(select-frame (car (last (frame-list))))" >/dev/null; } 2>&1 )
    if [[ $ERROR != "" ]]; then
      $emacs -Q --daemon=$unique -nw &>/dev/null

      $emacsclient -s $unique -e "(load \"$xiki_dir/misc/emacs/start_xiki_daemon.el\")" &>/dev/null
    fi

    # Now load the parameters into ~/xiki/misc/params/

    # Keeps flashing of the previous active buffer/frame to a minimum

    save_args_to_files "$@"

    # Now run it.  The hook will run when it opens and load the params

    $emacsclient -s $unique -t

  fi

  ;;

esac
